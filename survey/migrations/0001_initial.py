# Generated by Django 4.2.17 on 2025-02-20 11:39

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConsumerChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "buy_locally",
                    models.CharField(
                        choices=[
                            ("Always", "Always"),
                            ("Often", "Often"),
                            ("Occasionally", "Occasionally"),
                            ("Rarely", "Rarely"),
                            ("Never", "Never"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "reduce_plastic",
                    models.CharField(
                        choices=[
                            ("Always", "Always"),
                            ("Often", "Often"),
                            ("Occasionally", "Occasionally"),
                            ("Rarely", "Rarely"),
                            ("Never", "Never"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "carbon_conscious",
                    models.CharField(
                        choices=[
                            ("Very conscious", "Very conscious"),
                            ("Somewhat conscious", "Somewhat conscious"),
                            ("Not very conscious", "Not at all conscious"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DemographicInformation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "age",
                    models.CharField(
                        choices=[
                            ("18-24", "18-24"),
                            ("25-34", "25-34"),
                            ("35-44", "35-44"),
                            ("45-54", "45-54"),
                            ("55+", "55 and above"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("Male", "Male"),
                            ("Female", "Female"),
                            ("Non-binary", "Non-binary"),
                            ("Other", "Other (Specify)"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        choices=[
                            ("Urban", "Urban"),
                            ("Suburban", "Suburban"),
                            ("Rural", "Rural"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "occupation",
                    models.CharField(
                        choices=[
                            ("Employed", "Employed"),
                            ("Student", "Student"),
                            ("Homemaker", "Homemaker"),
                            ("Unemployed", "Unemployed"),
                            ("Other", "Other"),
                        ],
                        max_length=15,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EnergyConsumption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "primary_source",
                    models.CharField(
                        choices=[
                            ("electricity", "Electricity from the grid"),
                            ("solar", "Solar power"),
                            ("wind", "Wind power"),
                            ("other", "Other (please specify)"),
                        ],
                        default="electricity",
                        max_length=20,
                    ),
                ),
                (
                    "energy_efficient_usage",
                    models.CharField(
                        choices=[
                            ("always", "Always"),
                            ("often", "Often"),
                            ("occasionally", "Occasionally"),
                            ("rarely", "Rarely"),
                            ("never", "Never"),
                        ],
                        default="always",
                        max_length=20,
                    ),
                ),
                (
                    "monthly_consumption",
                    models.CharField(
                        choices=[
                            ("<100", "Less than 100 kWh"),
                            ("100-300", "100-300 kWh"),
                            ("300-500", "300-500 kWh"),
                            (">500", "More than 500 kWh"),
                        ],
                        default="<100",
                        max_length=20,
                    ),
                ),
                (
                    "other_source",
                    models.CharField(
                        blank=True,
                        help_text="Specify other energy source if selected.",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EnvironmentalAwareness",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("does_gardening", models.BooleanField()),
                ("attends_awareness_programs", models.BooleanField()),
                ("aware_of_sustainable_features", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="FoodConsumption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "diet_type",
                    models.CharField(
                        choices=[
                            ("High meat", "High meat"),
                            ("Medium meat", "Medium meat"),
                            ("Low meat", "Low meat"),
                            ("Vegetarian", "Vegetarian"),
                            ("Vegan", "Vegan"),
                            ("Pescetarian", "Pescetarian"),
                            ("Other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("beef_consumption", models.CharField(max_length=25)),
                ("pork_consumption", models.CharField(max_length=25)),
                ("mutton_consumption", models.CharField(max_length=25)),
                ("milk_consumption", models.CharField(max_length=25)),
                ("potato_consumption", models.CharField(max_length=25)),
                ("vegetable_consumption", models.CharField(max_length=25)),
                ("rice_consumption", models.CharField(max_length=25)),
                ("wheat_consumption", models.CharField(max_length=25)),
                ("nuts_consumption", models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name="Miscellaneous",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "international_flights",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("1-2", "1-2 times"),
                            ("3-5", "3-5 times"),
                            ("5+", "More than 5 times"),
                        ],
                        default="none",
                        max_length=10,
                        verbose_name="How often do you take international flights per year?",
                    ),
                ),
                (
                    "carbon_offset",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default="no",
                        max_length=3,
                        verbose_name="Do you participate in carbon offset programs or initiatives?",
                    ),
                ),
                (
                    "additional_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Any additional comments or practices you would like to share?",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Occupation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "owns_business",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=3,
                    ),
                ),
                (
                    "promotes_awareness",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=3,
                    ),
                ),
                (
                    "attends_seminars",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=3,
                    ),
                ),
                (
                    "seminar_location",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Within city limits", "Within city limits"),
                            ("Within state", "Within state"),
                            ("Within country", "Within country"),
                            ("International", "International"),
                        ],
                        default="Within city limits",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "seminar_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Annually", "Annually"),
                            ("Monthly", "Monthly"),
                            ("Weekly", "Weekly"),
                        ],
                        default="Annually",
                        max_length=10,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegistrationForm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Transportation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "primary_mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Private car", "Private car"),
                            ("Public transportation", "Public transportation"),
                            ("Bicycle", "Bicycle"),
                            ("Walking", "Walking"),
                            ("Motorcycle/scooter", "Motorcycle/scooter"),
                            ("Other", "Other"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("owns_electric_vehicle", models.BooleanField()),
                (
                    "frequency_private_transport",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Daily", "Daily"),
                            ("Several times a week", "Several times a week"),
                            ("Occasionally", "Occasionally"),
                            ("Rarely", "Rarely"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "driving_pattern",
                    models.CharField(
                        choices=[
                            ("Steady and mature", "Steady and mature"),
                            ("Fast but safe", "Fast but safe"),
                            ("Rash", "Rash"),
                            ("No idea", "No idea"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "avg_distance_per_day",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Less than 5 km", "Less than 5 km"),
                            ("5-10 km", "5-10 km"),
                            ("10-20 km", "10-20 km"),
                            ("More than 20 km", "More than 20 km"),
                        ],
                        max_length=25,
                        null=True,
                    ),
                ),
                ("carpool", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
